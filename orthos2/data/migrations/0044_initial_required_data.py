# Generated by Django 4.2.3 on 2023-07-28 07:43
# We can't import the models directly as it may be a newer version than this migration expects. We use the historical
# version.

from django.apps.registry import Apps
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def create_initial_serverconfigs(
    app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor
):
    ServerConfig = app_registry.get_model("data", "ServerConfig")
    db_alias = schema_editor.connection.alias
    ServerConfig.objects.using(db_alias).bulk_create(
        [
            ServerConfig(
                key="orthos.bugreport.url",
                value="https://github.com/openSUSE/orthos2/issues",
            ),
            ServerConfig(
                key="orthos.cli.url",
                value="https://build.opensuse.org/package/show/systemsmanagement:orthos2:production/orthos-client",
            ),
            ServerConfig(
                key="orthos.documentation.url", value="https://orthos2.rtfd.io/"
            ),
            ServerConfig(
                key="orthos.api.welcomemessage", value="Come in, reserve and play..."
            ),
        ],
        ignore_conflicts=True,
    )


def create_initial_architectures(
    app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor
):
    Architecture = app_registry.get_model("data", "Architecture")
    db_alias = schema_editor.connection.alias
    Architecture.objects.using(db_alias).bulk_create(
        [
            Architecture(name="x86_64"),
            Architecture(name="ppc"),
            Architecture(name="ppc64"),
            Architecture(name="ppc64le"),
            Architecture(name="aarch64"),
            Architecture(name="s390x"),
            Architecture(name="ia64"),
            Architecture(name="embedded"),
            Architecture(name="unspecified"),
        ],
        ignore_conflicts=True,
    )


def create_initial_vendors(app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor):
    Vendor = app_registry.get_model("data", "Vendor")
    db_alias = schema_editor.connection.alias
    Vendor.objects.using(db_alias).bulk_create(
        [
            Vendor(name="AMD"),
            Vendor(name="Cavium"),
            Vendor(name="Cisco Systems"),
            Vendor(name="Colfax"),
            Vendor(name="Dell"),
            Vendor(name="Fujitsu"),
            Vendor(name="FUJITSU"),
            Vendor(name="Hitachi"),
            Vendor(name="HP"),
            Vendor(name="HPe"),
            Vendor(name="IBM"),
            Vendor(name="Intel"),
            Vendor(name="Lenovo"),
            Vendor(name="Marvell Semiconductor Inc"),
            Vendor(name="Prague_Other"),
            Vendor(name="QCT"),
            Vendor(name="Qualcomm Inc"),
            Vendor(name="Raritan"),
            Vendor(name="Raspberry"),
            Vendor(name="Sentry Switched CDU"),
            Vendor(name="SGI"),
            Vendor(name="Supermicro"),
            Vendor(name="Tyan"),
            Vendor(name="Unknown"),
            Vendor(name="Foxconn"),
            Vendor(name="NetApp"),
            Vendor(name="Brocade"),
            Vendor(name="Other"),
        ],
        ignore_conflicts=True,
    )


def create_initial_systems(app_registry: Apps, schema_editor: BaseDatabaseSchemaEditor):
    System = app_registry.get_model("data", "System")
    db_alias = schema_editor.connection.alias
    System.objects.using(db_alias).bulk_create(
        [
            System(name="BareMetal", virtual=False),
            System(name="VM KVM", virtual=True),
            System(name="VM PowerKVM", virtual=True),
            System(name="VM XEN", virtual=True),
            System(name="VM zVM", virtual=True),
            System(name="VM zKVM", virtual=True),
            System(name="LPAR PowerPC", virtual=True),
            System(name="LPAR zSeries", virtual=True),
        ],
        ignore_conflicts=True,
    )


class Migration(migrations.Migration):
    dependencies = [
        ("data", "0043_add_network_model"),
    ]

    operations = [
        migrations.RunPython(create_initial_serverconfigs),
        migrations.RunPython(create_initial_vendors),
        migrations.RunPython(create_initial_systems),
        migrations.RunPython(create_initial_architectures),
    ]
