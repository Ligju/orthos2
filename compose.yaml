# For the hostnames to work an entry in /etc/hosts is needed:
# 127.0.0.1 orthos2.orthos2.test cobbler.orthos2.test netbox.orthos2.test
services:
  proxy:
    image: traefik:v3.4
    container_name: traefik
    command:
      - --accesslog=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: always
  orthos2:
    build:
      context: .
      dockerfile: docker/develop-tw.dockerfile
    hostname: orthos2.orthos2.test
    env_file:
      - "docker/orthos/orthos2.env"
    cap_add:
      - NET_RAW
    volumes:
      - ./:/code
    depends_on:
      orthos2_database:
        condition: service_healthy
      netbox:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orthos2.rule=Host(`orthos2.orthos2.test`)"
      - "traefik.http.routers.orthos2.entrypoints=web,websecure"
      - "traefik.http.services.orthos2.loadbalancer.server.port=8000"
  orthos2_taskmanager:
    build:
      context: .
      dockerfile: docker/develop-tw.dockerfile
    environment:
      ORTHOS2_MODE: "taskmanager"
    env_file:
      - "docker/orthos/orthos2.env"
    cap_add:
      - NET_RAW
    volumes:
      - ./:/code
    depends_on:
      orthos2_database:
        condition: service_healthy
      orthos2:
        condition: service_healthy
  orthos2_database:
    image: postgres
    restart: always
    hostname: database.orthos2.test
    env_file:
      - "docker/orthos/db.env"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -d $${POSTGRES_USER} -U $${POSTGRES_USER}",
        ]
      interval: 1s
      timeout: 5s
      retries: 10
  cobbler:
    hostname: cobbler.orthos2.test
    build:
      context: docker/cobbler
      dockerfile: cobbler.dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cobbler.rule=Host(`cobbler.orthos2.test`)"
      - "traefik.http.routers.cobbler.entrypoints=web,websecure"
      - "traefik.http.services.cobbler.loadbalancer.server.port=80"
  serial_console:
    hostname: sconsole.orthos2.test
    build:
      context: docker/serial-console
      dockerfile: serial-console.dockerfile
    #ports:
    #  - 22:22
  machine_bmc:
    hostname: bmc.orthos2.test
    build:
      context: docker/bmc
      dockerfile: bmc.dockerfile
    ports:
      - "9001:9001"
  # Netbox part below taken and adjusted from https://github.com/netbox-community/netbox-docker
  netbox: &netbox
    image: ${IMAGE-docker.io/netboxcommunity/netbox:latest}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    env_file: docker/netbox/netbox.env
    user: "unit:root"
    volumes:
      - ./docker/netbox/test_config.py:/etc/netbox/config/test_config.py:z,ro
    healthcheck:
      test: curl -f http://localhost:8080/login/ || exit 1
      start_period: ${NETBOX_START_PERIOD-240s}
      timeout: 3s
      interval: 15s
  netbox-worker:
    <<: *netbox
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    depends_on:
      netbox:
        condition: service_healthy
    healthcheck:
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 40s
      timeout: 3s
      interval: 15s
  netbox-housekeeping:
    <<: *netbox
    command:
      - /opt/netbox/housekeeping.sh
    depends_on:
      netbox:
        condition: service_healthy
    healthcheck:
      test: ps -aux | grep -v grep | grep -q housekeeping || exit 1
      start_period: 40s
      timeout: 3s
      interval: 15s

  postgres:
    image: docker.io/postgres:17-alpine
    env_file: docker/netbox/postgres.env
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER ## $$ because of docker-compose
      start_period: 20s
      interval: 1s
      timeout: 5s
      retries: 5

  redis: &redis
    image: docker.io/valkey/valkey:8.0-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - valkey-server --save "" --appendonly no --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: docker/netbox/redis.env
    healthcheck:
      test: '[ $$(valkey-cli --pass "$${REDIS_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
  redis-cache:
    <<: *redis
    env_file: docker/netbox/redis-cache.env
