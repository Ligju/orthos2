name: Tests

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  unit:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-devel.txt', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Dependencies
      run: |
        sudo apt-get install python3-setuptools libldap2-dev libsasl2-dev jq
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements-devel.txt
    - name: Create required directories
      run: |
        sudo mkdir -p /var/log/orthos2
        sudo mkdir -p /var/lib/orthos2/database
    - name: Create required files
      run: |
        sudo touch /var/log/orthos2/default.log
        sudo touch /var/lib/orthos2/database/db.sqlite3
    - name: Adjust permissions for files
      run: |
        CURRENT_USER=$(whoami)
        CURRENT_GROUP=$(id -gn)
        sudo chown -R $CURRENT_USER:$CURRENT_GROUP /var/lib/orthos2
        sudo chown -R $CURRENT_USER:$CURRENT_GROUP /var/log/orthos2
    - name: Migrate database
      env:
        ORTHOS_USER: runner
      run: |
        python3 manage.py migrate
    - name: Run Tests
      env:
        ORTHOS_USER: runner
      run: |
        coverage run --source='.' manage.py test orthos2
        coverage report
    - name: Check coverage goal
      run: |
        # Coverage goal is atm 25% or greater
        coverage json
        coverage_percent=$(jq -r ".totals.percent_covered_display" < coverage.json)
        [ "$coverage_percent" -gt "25" ]
  integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Build Orthos 2 development docker images
        run: |
          docker compose build
      - name: Setup Orthos 2 server
        run: |
          docker compose up -d
        # TODO: Ensure domain resolves correctly
      - name: Generate Django Token
        # Wait 10 seconds so the container can start
        run: |
          sleep 10
          docker compose cp orthos2:/var/lib/orthos2/admin-token .
          echo "ORTHOS_DJANGO_ADMIN_TOKEN=$(cat ./admin-token)" >> $GITHUB_ENV
      - name: Configure orthosrc
        run: |
          sed -i "s/token = /token = $ORTHOS_DJANGO_ADMIN_TOKEN/g" cli/orthosrc
          sed -i "s/protocol = https/protocol = http/g" cli/orthosrc
          sed -i "s/server = orthos2.arch.suse.de/server = localhost/g" cli/orthosrc
          sed -i "s/port = 443/port = 8000/g" cli/orthosrc
      - run: cat cli/orthosrc
      - name: Execute Integration Tests
        run: |
          docker compose exec -it orthos2 bash -c 'cd cli; python3 -m unittest discover -v'
